name: Rust Release

on:
  release:
    types: [created] 

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            ext: ""
          - target: x86_64-apple-darwin
            os: macos-latest
            ext: ""
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            ext: ".exe"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get repository name
        id: repo
        run: |
          echo "repo_name=$(echo '${{ github.repository }}' | awk -F/ '{print $2}')" >> $GITHUB_ENV

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Strip binary (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/${{ env.repo_name }}${{ matrix.ext }}

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: target/${{ matrix.target }}/release/${{ env.repo_name }}${{ matrix.ext }}
          if-no-files-found: error

  create-release:
    name: Prepare release assets
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Get repository name
        id: repo
        run: |
          echo "repo_name=$(echo '${{ github.repository }}' | awk -F/ '{print $2}')" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create tarballs for Linux/macOS
        run: |
          for target in x86_64-unknown-linux-gnu x86_64-apple-darwin; do
            mkdir -p release/$target
            cp artifacts/$target/${{ env.repo_name }} release/$target/
            tar -czvf release/${{ env.repo_name }}-$target.tar.gz -C release/$target ${{ env.repo_name }}
            sha256sum release/${{ env.repo_name }}-$target.tar.gz > release/${{ env.repo_name }}-$target.tar.gz.sha256
          done

      - name: Create zip for Windows
        working-directory: artifacts/x86_64-pc-windows-msvc
        run: |
          powershell -command "Compress-Archive -Path ${{ env.repo_name }}.exe -DestinationPath ../../release/${{ env.repo_name }}-x86_64-pc-windows-msvc.zip"
          cd ../../release
          sha256sum ${{ env.repo_name }}-x86_64-pc-windows-msvc.zip > ${{ env.repo_name }}-x86_64-pc-windows-msvc.zip.sha256

      - name: Generate release notes
        id: notes
        uses: release-notes-generator/actions@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          configuration: .github/release-notes-config.json

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          body: ${{ steps.notes.outputs.notes }}
          files: |
            release/*.tar.gz
            release/*.zip
            release/*.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
