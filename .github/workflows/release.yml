name: Rust Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: myapp
            bin_name: myapp
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_name: myapp-macos
            bin_name: myapp
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: myapp.exe
            bin_name: myapp.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Upload binary to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.bin_name }}
          if-no-files-found: error

  create-release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    needs: build
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

  upload-release:
    name: Upload release assets
    runs-on: ubuntu-latest
    needs: [build, create-release]
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            artifact_name: myapp
            asset_name: myapp-x86_64-unknown-linux-gnu
          - target: x86_64-apple-darwin
            artifact_name: myapp-macos
            asset_name: myapp-x86_64-apple-darwin
          - target: x86_64-pc-windows-msvc
            artifact_name: myapp.exe
            asset_name: myapp-x86_64-pc-windows-msvc.exe

    steps:
      - name: Download binary from artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: .

      - name: Set executable permissions (Linux/macOS)
        if: matrix.target != 'x86_64-pc-windows-msvc'
        run: chmod +x ${{ matrix.artifact_name }}

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.artifact_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream    
